"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const printer = __importStar(require("../src"));
const shift_parser_1 = require("shift-parser");
const chai_1 = __importDefault(require("chai"));
const originalSrc = `function foo() { var a = 0; for (let i = 0; i < document.all.length; i++) { a += i } return a } foo()`;
const verboseSrc = `function foo() {
  var a = 0;
  for (let i = 0; i < document.all.length; i++) {
    a += i;
  }
  return a;
}
foo();
`;
const truncatedSrc = 'function foo(){var a=0;for(let i=0;i<...';
const terseSrc = `function foo(){var a=0;for(let i=0;i<document.all.length;i++){a+=i}return a}foo()`;
describe('shift-printer', () => {
    it('.prettyPrint() should produce somewhat prettified output ', () => {
        const ast = shift_parser_1.parseScript(originalSrc);
        const src = printer.prettyPrint(ast);
        chai_1.default.expect(src).to.equal(verboseSrc);
    });
    it('.print() should be an alias for .prettyPrint() ', () => {
        chai_1.default.expect(printer.prettyPrint).to.equal(printer.print);
    });
    it('.printTruncated() should print a truncated string', () => {
        const ast = shift_parser_1.parseScript(originalSrc);
        const src = printer.printTruncated(ast, 40, '...');
        chai_1.default.expect(src.length).to.equal(40);
        chai_1.default.expect(src).to.equal(truncatedSrc);
    });
    it('.printSummary() should print a summarized string for a specific node', () => {
        let src = printer.printSummary(shift_parser_1.parseScript('function test(a,b,c) {return a+b+c}').statements[0]);
        chai_1.default.expect(src).to.equal('function test(a, b, c) { ... }');
        src = printer.printSummary(shift_parser_1.parseScript('class Test {functiona(){} functionb(){}}').statements[0]);
        chai_1.default.expect(src).to.equal('class Test { ... }');
    });
    it('.printTerse() should print a condensed string', () => {
        const ast = shift_parser_1.parseScript(originalSrc);
        const src = printer.printTerse(ast);
        chai_1.default.expect(src).to.equal(terseSrc);
    });
});
//# sourceMappingURL=index.test.js.map