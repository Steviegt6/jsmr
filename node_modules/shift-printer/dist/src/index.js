"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logTerse = exports.logTruncated = exports.log = exports.printTerse = exports.printTruncated = exports.printSummary = exports.prettyPrint = exports.print = void 0;
const shift_codegen_1 = __importStar(require("@jsoverson/shift-codegen"));
const { Seq, } = require('@jsoverson/shift-codegen/dist/coderep.js');
exports.print = prettyPrint;
function prettyPrint(ast) {
    if (!ast)
        return '';
    return shift_codegen_1.default(ast, new shift_codegen_1.FormattedCodeGen());
}
exports.prettyPrint = prettyPrint;
function printSummary(ast) {
    if (!ast)
        return '';
    class SummaryCodeGen extends shift_codegen_1.FormattedCodeGen {
        sep(separator) {
            return super.sep(separator);
        }
        brace(rep, node, first, last, emptySep) {
            const brace = super.brace(rep, node);
            // Hacky way to remove line breaks without re-implementing more than I want.
            if (brace.expr && brace.expr.children) {
                if (brace.expr.children[0].constructor.name === 'Linebreak')
                    brace.expr.children.shift();
            }
            return brace;
        }
        reduceFunctionBody() {
            return this.t(' ... ');
        }
        reduceClassDeclaration(node, x) {
            const seq = super.reduceClassDeclaration(node, x);
            seq.children.find((t) => t.token === '{}').token = '{ ... }';
            return seq;
        }
        reduceClassElement() {
            return new Seq([]);
        }
    }
    let src = shift_codegen_1.default(ast, new SummaryCodeGen());
    return src.trim();
}
exports.printSummary = printSummary;
function printTruncated(ast, length = 50, overflow = '...') {
    if (!ast)
        return '';
    const src = shift_codegen_1.default(ast);
    const summary = src.substring(0, length - overflow.length) + overflow;
    return summary;
}
exports.printTruncated = printTruncated;
function printTerse(ast) {
    if (!ast)
        return '';
    const src = shift_codegen_1.default(ast);
    return src;
}
exports.printTerse = printTerse;
function log(ast) {
    console.log(exports.print(ast));
}
exports.log = log;
function logTruncated(ast, length, overflow) {
    console.log(printTruncated(ast, length, overflow));
}
exports.logTruncated = logTruncated;
function logTerse(ast) {
    console.log(printTerse(ast));
}
exports.logTerse = logTerse;
//# sourceMappingURL=index.js.map