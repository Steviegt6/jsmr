import * as printer from '../src';
import {parseScript} from 'shift-parser';
import chai from 'chai';

const originalSrc = `function foo() { var a = 0; for (let i = 0; i < document.all.length; i++) { a += i } return a } foo()`;
const verboseSrc = `function foo() {
  var a = 0;
  for (let i = 0; i < document.all.length; i++) {
    a += i;
  }
  return a;
}
foo();
`;
const truncatedSrc = 'function foo(){var a=0;for(let i=0;i<...';
const terseSrc = `function foo(){var a=0;for(let i=0;i<document.all.length;i++){a+=i}return a}foo()`;

describe('shift-printer', () => {
  it('.prettyPrint() should produce somewhat prettified output ', () => {
    const ast = parseScript(originalSrc);
    const src = printer.prettyPrint(ast);
    chai.expect(src).to.equal(verboseSrc);
  });
  it('.print() should be an alias for .prettyPrint() ', () => {
    chai.expect(printer.prettyPrint).to.equal(printer.print);
  });
  it('.printTruncated() should print a truncated string', () => {
    const ast = parseScript(originalSrc);
    const src = printer.printTruncated(ast, 40, '...');
    chai.expect(src.length).to.equal(40);
    chai.expect(src).to.equal(truncatedSrc);
  });
  it('.printSummary() should print a summarized string for a specific node', () => {
    let src = printer.printSummary(parseScript('function test(a,b,c) {return a+b+c}').statements[0]);
    chai.expect(src).to.equal('function test(a, b, c) { ... }');
    src = printer.printSummary(parseScript('class Test {functiona(){} functionb(){}}').statements[0]);
    chai.expect(src).to.equal('class Test { ... }');
  });
  it('.printTerse() should print a condensed string', () => {
    const ast = parseScript(originalSrc);
    const src = printer.printTerse(ast);
    chai.expect(src).to.equal(terseSrc);
  });
});
