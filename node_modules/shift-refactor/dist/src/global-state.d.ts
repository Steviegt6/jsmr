import { FunctionDeclaration, Node } from 'shift-ast';
import { Declaration, Reference, Scope, ScopeLookup, Variable } from 'shift-scope';
import { Replacer, SelectorOrNode, SimpleIdentifier, SimpleIdentifierOwner } from './misc/types';
/**
 * Options for GlobalState
 */
export interface GlobalStateOptions {
    autoCleanup?: boolean;
}
/**
 * Global State object for a script. Manages the root node, insertions, deletions, and replacements. All queries start from a global state and subqueries are child nodes.
 *
 * @remarks
 *
 * Most users won't need to instantiate this directly. Access an instance via `.globalSession` on any refactor query instance.
 *
 * @public
 */
export declare class GlobalState {
    root: Node;
    autoCleanup: boolean;
    scopeMap: WeakMap<Variable, Scope>;
    scopeOwnerMap: WeakMap<Node, Scope>;
    parentMap: WeakMap<Node, Node>;
    variables: Set<Variable>;
    private dirty;
    private replacements;
    private deletions;
    private insertions;
    private lookupTable;
    constructor(sourceOrNode: string | Node, config?: GlobalStateOptions);
    lookupScope(variableLookup: Variable | Variable[] | SimpleIdentifierOwner | SimpleIdentifierOwner[] | SimpleIdentifier | SimpleIdentifier[]): Scope | undefined;
    findReferences(node: SimpleIdentifier | SimpleIdentifierOwner): Reference[];
    findDeclarations(node: SimpleIdentifier | SimpleIdentifierOwner): Declaration[];
    getInnerScope(node: FunctionDeclaration): Scope | undefined;
    lookupVariable(node: SimpleIdentifierOwner | SimpleIdentifierOwner[] | SimpleIdentifier | SimpleIdentifier[]): Variable;
    lookupVariableByName(name: string): Variable[];
    _queueDeletion(node: Node): void;
    _queueReplacement(from: Node, to: Node): void;
    getLookupTable(): ScopeLookup;
    _rebuildScopeMap(): void;
    isDirty(dirty?: boolean): boolean;
    validate(): any;
    conditionalCleanup(): this;
    cleanup(): this;
    insert(selectorOrNode: SelectorOrNode, replacer: Replacer, after?: boolean): ReturnType<typeof GlobalState.prototype.conditionalCleanup>;
    findParents(selectorOrNode: SelectorOrNode): Node[];
    generate(ast?: Node): any;
    private rebuildParentMap;
}
