import { ComputedMemberAssignmentTarget, ComputedMemberExpression, IdentifierExpression, LiteralInfinityExpression, LiteralNullExpression, LiteralNumericExpression, LiteralRegExpExpression, LiteralStringExpression, Node, Script, Statement, StaticMemberAssignmentTarget, StaticMemberExpression, UnaryExpression } from 'shift-ast';
import { NodesWithStatements, SelectorOrNode } from './types';
export declare function copy(object: any): any;
export declare function isString(input: any): input is string;
export declare function isFunction(input: any): input is Function;
export declare function isArray(input: any): input is any[];
export declare function isShiftNode(input: any): input is Node;
export declare function isStatement(input: any): input is Statement;
export declare function forceIntoArray<T>(input: T | T[]): T[];
export declare function isNodeWithStatements(input: any): input is NodesWithStatements;
export declare function innerBodyStatements(input: any): Node;
export declare function isLiteral(input: any): input is LiteralStringExpression | LiteralInfinityExpression | LiteralNumericExpression | LiteralNullExpression | LiteralRegExpExpression | UnaryExpression;
export declare function findNodes(ast: Node[], input: SelectorOrNode): Node[];
export declare function extractStatement(tree: Script): Statement;
export declare function extractExpression(tree: Script): import("shift-ast").Expression;
export declare function buildParentMap(tree: Node): WeakMap<object, any>;
export declare function isMemberAssignment(node: Node): node is ComputedMemberAssignmentTarget | StaticMemberAssignmentTarget;
export declare function isMemberExpression(node: Node): node is ComputedMemberExpression | StaticMemberExpression;
export declare function isDeepSimilar(partial: any, actual: any): boolean;
export declare function getRootIdentifier(expr: StaticMemberExpression | ComputedMemberExpression | StaticMemberAssignmentTarget | ComputedMemberAssignmentTarget | IdentifierExpression): IdentifierExpression;
export declare function identityLogger<T>(x: T): T;
