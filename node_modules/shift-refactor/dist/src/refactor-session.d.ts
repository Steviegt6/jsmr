import { Expression, Node, Statement } from 'shift-ast';
import { Declaration, Reference, Variable } from 'shift-scope';
import { GlobalState } from './global-state';
import { AsyncReplacer, Replacer, SelectorOrNode, SimpleIdentifier, SimpleIdentifierOwner } from './misc/types';
/**
 * The Shift Refactor class that manages
 *
 * @deprecated
 * This was the original interface for shift-refactor pre-1.0. It remains similarly usable but is no longer intended to be instantiated directly.
 * Extend the chainable interface when necessary and use refactor() to instantiate. If a use case is not covered, submit an issue.
 *
 * @internal
 */
export declare class RefactorSession {
    nodes: Node[];
    _root?: Node;
    globalSession: GlobalState;
    constructor(sourceOrNodes: Node | Node[] | string, globalSession?: GlobalState);
    get root(): Node;
    get length(): number;
    $(querySessionOrNodes: SelectorOrNode | RefactorSession): RefactorSession;
    subSession(querySessionOrNodes: SelectorOrNode | RefactorSession): RefactorSession;
    rename(selectorOrNode: SelectorOrNode, newName: string): this;
    renameInPlace(lookup: Variable, newName: string): void;
    delete(selectorOrNode?: SelectorOrNode): GlobalState;
    replace(selectorOrNode: SelectorOrNode, replacer: Replacer | AsyncReplacer): number;
    replaceAsync(selectorOrNode: SelectorOrNode, replacer: AsyncReplacer): Promise<number>;
    replaceRecursive(selectorOrNode: SelectorOrNode, replacer: Replacer): this;
    first(): Node;
    findParents(selectorOrNode: SelectorOrNode): Node[];
    prepend(selectorOrNode: SelectorOrNode, replacer: Replacer): GlobalState;
    append(selectorOrNode: SelectorOrNode, replacer: Replacer): GlobalState;
    query(selector: string | string[]): Node[];
    find(selectorOrNode: string): Node[];
    queryFrom(astNodes: Node | Node[], selectorOrNode: string): Node[];
    findMatchingExpression(sampleSrc: string): Expression[];
    findMatchingStatement(sampleSrc: string): Statement[];
    findReferences(node: SimpleIdentifier | SimpleIdentifierOwner): Reference[];
    findDeclarations(node: SimpleIdentifier | SimpleIdentifierOwner): Declaration[];
    findOne(selectorOrNode: string): Node;
    closest(originSelector: SelectorOrNode, closestSelector: string): Node[];
    cleanup(): this;
    print(ast?: Node): any;
}
